name: CI
on:
  push:
    branches:
      - main
    tags: ['*']
    paths-ignore:
      - 'CITATION.bib'
      - 'LICENSE.md'
      - 'README.md'
      - '.zenodo.json'
      - '.github/workflows/benchmark.yml'
      - '.github/workflows/CompatHelper.yml'
      - '.github/workflows/Documenter.yml'
      - '.github/workflows/Format-check.yml'
      - '.github/workflows/TagBot.yml'
      - '.github/workflows/SpellCheck.yml'
      - 'benchmark/**'
      - 'docs/**'
  pull_request:
    paths-ignore:
      - 'CITATION.bib'
      - 'LICENSE.md'
      - 'README.md'
      - '.zenodo.json'
      - '.github/workflows/benchmark.yml'
      - '.github/workflows/CompatHelper.yml'
      - '.github/workflows/Documenter.yml'
      - '.github/workflows/Format-check.yml'
      - '.github/workflows/TagBot.yml'
      - '.github/workflows/SpellCheck.yml'
      - 'benchmark/**'
      - 'docs/**'
  workflow_dispatch:

concurrency:
  # Skip intermediate builds: always.
  # Cancel intermediate builds: only if it is a pull request build.
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: ${{ startsWith(github.ref, 'refs/pull/') }}

jobs:
  test:
    if: "!contains(github.event.head_commit.message, 'skip ci')"
    name: Julia ${{ matrix.version }} - ${{ matrix.os }} - ${{ github.event_name }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        version:
          - '~1.12.0-0'
        os:
          - ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: julia-actions/setup-julia@v2
        with:
          version: ${{ matrix.version }}
      - run: julia -e 'using InteractiveUtils; versioninfo(verbose=true)'
      - uses: julia-actions/cache@v2
      - name: Install and run JET.jl
        shell: julia --project="." --color=yes {0}
        run: |
          using Pkg
          Pkg.add("JET")
          Pkg.instantiate()
          using JET
          using DispersiveShallowWater

          # JET.jl
          # With the default settings as of 2025-05-08, JET.jl
          # reports issues originating from RecipesBase.jl.
          # The only way to ignore them seems to be something like the
          # following hack inspired by the discussion in
          # https://github.com/aviatesk/JET.jl/issues/570
          struct IgnoreRecipesBase end
          function JET.match_module(::IgnoreRecipesBase,
                                    @nospecialize(report::JET.InferenceErrorReport))
              s = "MethodInstance for RecipesBase.apply_recipe"
              any(report.vst) do vst
                  occursin(s, string(vst))
              end
          end
          test_package(DispersiveShallowWater;
                       target_defined_modules = true,
                       ignored_modules = (IgnoreRecipesBase(),))
